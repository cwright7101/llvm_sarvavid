


aux_source_directory(optimizations OPTIMIZATIONS_SRC)
aux_source_directory(utilities UTILITIES_SRC)
list(APPEND FOLDERS_SRC
    ${OPTIMIZATIONS_SRC}
    ${UTILITIES_SRC}
)

add_library(SarvavidPass MODULE
    # List your source files here. 
    Sarvavid.cpp
    ${FOLDERS_SRC}
)

include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories("${CMAKE_CURRENT_BINARY_DIR}/optimizations")
include_directories("${CMAKE_CURRENT_BINARY_DIR}/utilities")




# Use C++11 to compile our pass (i.e., supply -std=c++11).
target_compile_features(SarvavidPass PRIVATE cxx_range_for cxx_auto_type)

# LLVM is (typically) built with no C++ RTTI. We need to match that;
# otherwise, we'll get linker errors about missing RTTI data.
set_target_properties(SarvavidPass PROPERTIES
    COMPILE_FLAGS "-D__GLIBCXX_USE_CXX11_ABI=0 -fno-rtti"
)

# Get proper shared-library behavior (where symbols are not necessarily
# resolved when the shared library is linked) on OS X.
if(APPLE)
    set_target_properties(SarvavidPass PROPERTIES
        LINK_FLAGS "-undefined dynamic_lookup"
    )
endif(APPLE)
